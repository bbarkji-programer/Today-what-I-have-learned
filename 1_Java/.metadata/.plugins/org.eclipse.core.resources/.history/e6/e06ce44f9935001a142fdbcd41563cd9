package com.tj.supermarket;

	import java.awt.Container;
	import java.awt.Dimension;
	import java.awt.FlowLayout;
	import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
	import javax.swing.JButton;
	import javax.swing.JComboBox;
	import javax.swing.JFrame;
	import javax.swing.JLabel;
	import javax.swing.JPanel;
	import javax.swing.JScrollPane;
	import javax.swing.JTextArea;
	import javax.swing.JTextField;
	
	public class CustomerFrame extends JFrame implements ActionListener{
	//Swing
	private Container container;
	private JPanel jpup, jpbtn;
	private JTextField jtxtId, jtxtTel, jtxtName, jtxtPoint, jtxtAmount;
	private Vector<String> levels;
	private JComboBox<String> jcomLevel;
	private JButton jbtnTelSearch, jbtnNameSearch, jbtnPoint;
	private JButton jbtnBuy, jbtnLevelOutput, jbtnAllOutput, 
	jbtnInsert, jbtnTelUpdate, jbtnDelete, jbtnExit;
	private JTextArea jtxtPool;
	private JScrollPane scrollPane;
	
	private String driver;
	private String url;
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	ArrayList<CustomerDTO> customers;

	
	public CustomerFrame(String title) {
	super(title);
	
	setDefaultCloseOperation(EXIT_ON_CLOSE);
	customers = new ArrayList<CustomerDTO>();	
	driver = "oracle.jdbc.driver.OracleDriver";
	url = "jdbc:oracle:thin:@localhost:1521:xe"; 
	
	container = getContentPane();
	container.setLayout(new FlowLayout());
	jpup = new JPanel(new GridLayout(6, 3));
	jpbtn = new JPanel();
	jtxtId = new JTextField(20);
	jtxtTel = new JTextField(20);
	jtxtName = new JTextField(20);
	jtxtPoint = new JTextField(20);
	jtxtAmount = new JTextField(20);
	levels = new Vector<String>();
	levels.add("");
	
	try {
		Class.forName(driver);
		conn = DriverManager.getConnection(url,"scott","tiger");
		pstmt = conn.prepareStatement("SELECT LEVEL_NAME FROM CUS_LEVEL");
		rs = pstmt.executeQuery();
		while(rs.next()) {
			levels.add(rs.getString("level_name"));
		}
	} catch (ClassNotFoundException e) {
		System.out.println(e.getMessage());
	} catch (SQLException e) {
		System.out.println(e.getMessage());
	} finally {
		try {
			if(rs!=null) rs.close();
			if(pstmt!=null) pstmt.close();
			if(conn!=null) conn.close();
		} catch (Exception e2) {
			System.out.println(e2.getMessage());
		}
	}
	
	jcomLevel = new JComboBox<String>(levels);
	jbtnTelSearch = new JButton("폰4자리(FULL) 검색");
	jbtnNameSearch = new JButton("고객 이름 검색");
	jbtnPoint = new JButton("포인트로만 구매");
	jpup.add(new JLabel(" 아 이 디 ",(int) CENTER_ALIGNMENT));
	jpup.add(jtxtId);
	jpup.add(new JLabel("")); // 공간 확보를 위해 빈 라벨 추가 
	jpup.add(new JLabel("고 객 전 화",(int) CENTER_ALIGNMENT));
	jpup.add(jtxtTel);
	jpup.add(jbtnTelSearch);
	jpup.add(new JLabel("고 객 이 름",(int) CENTER_ALIGNMENT));
	jpup.add(jtxtName);
	jpup.add(jbtnNameSearch);
	jpup.add(new JLabel("포  인  트",(int) CENTER_ALIGNMENT));
	jpup.add(jtxtPoint);
	jpup.add(jbtnPoint);
	jpup.add(new JLabel("구 매 금 액",(int) CENTER_ALIGNMENT));
	jpup.add(jtxtAmount);
	jpup.add(new JLabel(""));//빈 라벨 추가하는 부분
	jpup.add(new JLabel("고 객 등 급",(int) CENTER_ALIGNMENT));
	jpup.add(jcomLevel);
	jbtnBuy = new JButton("물품 구매");
	jbtnLevelOutput = new JButton("등급별출력");
	jbtnAllOutput = new JButton("전체출력");
	jbtnInsert = new JButton("회원가입");
	jbtnTelUpdate = new JButton("번호수정");
	jbtnDelete = new JButton("회원탈퇴");
	jbtnExit = new JButton("나가기");
	jpbtn.add(jbtnBuy);
	jpbtn.add(jbtnLevelOutput);
	jpbtn.add(jbtnAllOutput);
	jpbtn.add(jbtnInsert);
	jpbtn.add(jbtnTelUpdate);
	jpbtn.add(jbtnDelete);
	jpbtn.add(jbtnExit);
	jtxtPool = new JTextArea(6, 60);
	scrollPane = new JScrollPane(jtxtPool);
	container.add(jpup);
	container.add(jpbtn);
	container.add(scrollPane);
	setSize(new Dimension(750, 385));setLocation(200, 200);
	setVisible(true);
	jtxtPool.setText("\t★ ★ ★ 고객검색 후 구매하세요 ★ ★ ★");
	
	jbtnTelSearch.addActionListener(this);
	jbtnNameSearch.addActionListener(this);
	jbtnPoint.addActionListener(this);
	jbtnBuy.addActionListener(this);
	jbtnLevelOutput.addActionListener(this);
	jbtnAllOutput.addActionListener(this);
	jbtnInsert.addActionListener(this);
	jbtnTelUpdate.addActionListener(this);
	jbtnDelete.addActionListener(this);
	jbtnExit.addActionListener(this);
	
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource()==jbtnTelSearch) {
			String sql ="SELECT CID, CTEL, CNAME, CPOINT, CCOST, LEVEL_NAME, " + 
					"	NVL((SELECT LEVEL_HICOST-CCOST+1 FROM CUSTOMER WHERE C.LEVEL_CODE<>3 AND CID=C.CID),0) SMM" + 
					"    FROM CUS_LEVEL L, CUSTOMER C" + 
					"    WHERE L.LEVEL_CODE=C.LEVEL_CODE AND CTEL LIKE '%'||?";
			String cTel = jtxtTel.getText().trim();
			if(cTel.length()>=4) {
				try {
					conn = DriverManager.getConnection(url,"scott","tiger");
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, cTel);
					rs = pstmt.executeQuery();
					customers.clear();
					while(rs.next()) {
						int cid = rs.getInt("cid");
						String ctel = rs.getString("ctel");
						String cname = rs.getString("cname");
						int cpoint = rs.getInt("cpoint");
						int ccost = rs.getInt("ccost");
						int smm = rs.getInt("smm");
						String level_name = rs.getString("level_name");
						
						jtxtId.setText(String.valueOf(cid));
						jtxtName.setText(cname);
						jtxtTel.setText(ctel);
						jtxtPoint.setText(String.valueOf(cpoint));
						jcomLevel.setSelectedItem(level_name);						
						customers.add(new CustomerDTO(ctel, cname,cpoint,ccost,level_name,smm));
					}
					if(!customers.isEmpty()){
						jtxtPool.setText("전화\t이름\t포인트\t구매누적액\t고객레벨\t레벨업을 위한 앞으로 구매할 금액\n");
						jtxtPool.append("-------------------------------------------------------------------------------------------------------------\n");
						for(CustomerDTO c : customers) {
							jtxtPool.append(c.toString()+"\n");
						}
					}
					else {
						jtxtId.setText("");
						jtxtName.setText("");
						jtxtPoint.setText("");
						jcomLevel.setSelectedIndex(0);
						jtxtPool.setText("없는 전화번호입니다.");
					}
				} catch (SQLException e1) {
					System.out.println(e1.getMessage());
				} finally {
					try {
						if(rs!=null) rs.close();
						if(pstmt!=null) pstmt.close();
						if(conn!=null) conn.close();
					} catch (Exception e2) {
						System.out.println(e2.getMessage());
					}
				}			
			}else {
				jtxtId.setText("");
				jtxtName.setText("");
				jtxtPoint.setText("");
				jcomLevel.setSelectedIndex(0);
				jtxtPool.setText("전화번호 입력 후 검색하세요.");
			}
			
		}else if(e.getSource()==jbtnNameSearch) {
			String sql = "SELECT CID, CTEL, CNAME, CPOINT, CCOST, LEVEL_NAME," + 
					"	NVL((SELECT LEVEL_HICOST-CCOST+1 FROM CUSTOMER WHERE C.LEVEL_CODE<>3 AND CID=C.CID),0) SMM" + 
					"    FROM CUS_LEVEL L, CUSTOMER C" + 
					"    WHERE L.LEVEL_CODE=C.LEVEL_CODE AND CNAME=?";
			String cname = jtxtName.getText().trim();
			if(cname.length()!=0) {
				try {
					conn = DriverManager.getConnection(url,"scott","tiger");
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, cname);
					rs = pstmt.executeQuery();
					customers.clear();
					while(rs.next()) {
						int cid = rs.getInt("cid");
						String ctel = rs.getString("ctel");
						cname = rs.getString("cname");
						int cpoint = rs.getInt("cpoint");
						int ccost = rs.getInt("ccost");
						String level_name = rs.getString("level_name");
						int smm = rs.getInt("smm");
						
						jtxtId.setText(String.valueOf(cid));
						jtxtTel.setText(ctel);
						jtxtName.setText(cname);
						jtxtPoint.setText(String.valueOf(cpoint));
						jcomLevel.setSelectedItem(level_name);
						customers.add(new CustomerDTO(ctel,cname,cpoint,ccost,level_name,smm));
					}
					if(!customers.isEmpty()) {
						jtxtPool.setText("전화\t이름\t포인트\t구매누적액\t고객레벨\t레벨업을 위한 앞으로 구매할 금액\n");
						jtxtPool.append("-------------------------------------------------------------------------------------------------------------\n");;
						for(CustomerDTO c : customers) {
							jtxtPool.append(c.toString()+"\n");
						}
					}else {
						jtxtId.setText("");
						jtxtName.setText("");
						jtxtPoint.setText("");
						jcomLevel.setSelectedIndex(0);
						jtxtPool.setText("없는 이름입니다.");
					}
				} catch (SQLException e1) {
					System.out.println(e1.getMessage()+1);
				} finally {
					try {
						if(rs!=null) rs.close();
						if(pstmt!=null) pstmt.close();
						if(conn!=null) conn.close();
					} catch (Exception e2) {
						System.out.println(e2.getMessage()+2);
					}
				}					
			}else {
				jtxtId.setText("");
				jtxtName.setText("");
				jtxtPoint.setText("");
				jcomLevel.setSelectedIndex(0);
				jtxtPool.setText("이름 입력 후 검색하세요.");
			}
						
		}else if(e.getSource()==jbtnPoint) {
			String sql="UPDATE CUSTOMER SET CPOINT=CPOINT-? WHERE CID=?";	
			String cid = jtxtId.getText().trim();
			int cpoint = Integer.parseInt(jtxtPoint.getText().trim());
			String level_name = jcomLevel.getSelectedItem().toString();
				if (cid.length()!=0) {
					int amount = 0;
					amount = Integer.parseInt(jtxtAmount.getText().trim());
					if(cpoint-amount>=0) {
					try {
						conn = DriverManager.getConnection(url,"scott","tiger");
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1,amount);
						pstmt.setString(2, cid);						
						int result = pstmt.executeUpdate();
							jtxtPool.setText("포인트로만 구매 성공");
							jtxtPoint.setText(String.valueOf(cpoint-amount));
							jtxtAmount.setText("");							
					} catch (SQLException e1) {
						System.out.println(e1.getMessage());
					} finally {
						try {
							if(pstmt!=null) pstmt.close();
							if(conn!=null) conn.close();
						} catch (Exception e2) {
							System.out.println(e2.getMessage()+2);
						}
					}						
				}else {
					jtxtPool.setText("포인트가 부족해서 포인트 결제가 불가해요.");
				}
			}else {
				jtxtPool.setText("아이디 or 폰 번호 or 이름 등으로 고객 검색 먼저 해주세요.");
			}
		}else if(e.getSource()==jbtnBuy) {
			String sql = "UPDATE CUSTOMER SET CCOST=CCOST+?, CPOINT=CPOINT+?*0.5," + 
					"    LEVEL_CODE=(SELECT L.LEVEL_CODE FROM CUS_LEVEL L, CUSTOMER C WHERE C.CCOST+? BETWEEN LEVEL_LOCOST AND LEVEL_HICOST AND CID=?)" + 
					"    WHERE CID=?";
			String cid = jtxtId.getText().trim();
			if(cid.length()!=0) {
				int amount =0;
				amount = Integer.parseInt(jtxtAmount.getText().trim());
				try {
					conn = DriverManager.getConnection(url,"scott","tiger");
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, amount);
					pstmt.setInt(2, amount);
					pstmt.setInt(3, amount);
					pstmt.setString(4, cid);
					int result = pstmt.executeUpdate();
					jtxtPool.setText("물품구매 성공, 필요 시 레벨 조정도 성공");
					jtxtAmount.setText("");
				} catch (SQLException e1) {
					System.out.println(e1.getMessage());
				} finally {
					try {
						if(pstmt!=null) pstmt.close();
						if(conn!=null) conn.close();
					} catch (Exception e2) {
						System.out.println(e2.getMessage()+2);
					}
				}					
			}else {
				jtxtPool.setText("아이디 or 폰 번호 or 이름 등으로 고객 검색 먼저 해주세요.");
			}
			
		}else if(e.getSource()==jbtnLevelOutput) {
			String sql="SELECT CID, CTEL, CNAME, CPOINT, CCOST, LEVEL_NAME," + 
					"	NVL((SELECT LEVEL_HICOST-CCOST+1 FROM CUSTOMER WHERE C.LEVEL_CODE<>3 AND CID=C.CID),0) SMM" + 
					"    FROM CUS_LEVEL L, CUSTOMER C" + 
					"    WHERE L.LEVEL_CODE=C.LEVEL_CODE AND C.LEVEL_CODE = (SELECT LEVEL_CODE FROM CUS_LEVEL WHERE LEVEL_NAME=?)";
			String level_name = jcomLevel.getSelectedItem().toString();
			if(!level_name.contentEquals("")) {
				try {
					conn = DriverManager.getConnection(url,"scott","tiger");
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, level_name);
					rs = pstmt.executeQuery();
					customers.clear();
					while(rs.next()) {
						int cid = rs.getInt("cid");
						String ctel = rs.getString("ctel");
						String cname = rs.getString("cname");
						int cpoint = rs.getInt("cpoint");
						int ccost = rs.getInt("ccost");
						level_name = rs.getString("level_name");
						int smm = rs.getInt("smm");						
						customers.add(new CustomerDTO(ctel,cname,cpoint,ccost,level_name,smm));
					}
					if(!customers.isEmpty()) {
						jtxtPool.setText("전화\t이름\t포인트\t구매누적액\t고객레벨\t레벨업을 위한 앞으로 구매할 금액\n");
						jtxtPool.append("-------------------------------------------------------------------------------------------------------------\n");;
						for(CustomerDTO c : customers) {
							jtxtPool.append(c.toString()+"\n");
						}
					}else {
						jtxtId.setText("");
						jtxtName.setText("");
						jtxtPoint.setText("");
						jcomLevel.setSelectedIndex(0);
						jtxtPool.setText("등급을 선택 후 등급별 출력을 클릭하세요.");
					}										
				} catch (SQLException e1) {
					System.out.println(e1.getMessage());
				} finally {
					try {
						if(rs!=null) rs.close();
						if(pstmt!=null) pstmt.close();
						if(conn!=null) conn.close();
					} catch (Exception e2) {
						System.out.println(e2.getMessage()+2);
					}
				}		
			}
		}else if(e.getSource()==jbtnAllOutput) {
			String sql="SELECT CID, CTEL, CNAME, CPOINT, CCOST, LEVEL_NAME," + 
					"	NVL((SELECT LEVEL_HICOST-CCOST+1 FROM CUSTOMER WHERE C.LEVEL_CODE<>3 AND CID=C.CID),0) SMM" + 
					"    FROM CUS_LEVEL L, CUSTOMER C" + 
					"    WHERE L.LEVEL_CODE=C.LEVEL_CODE" + 
					"    ORDER BY CCOST DESC";
			try {
				conn = DriverManager.getConnection(url,"scott","tiger");
				pstmt = conn.prepareStatement(sql);
				rs = pstmt.executeQuery();
				customers.clear();
				while(rs.next()) {
					String ctel = rs.getString("ctel");
					String cname = rs.getString("cname");
					int cpoint = rs.getInt("cpoint");
					int ccost = rs.getInt("ccost");
					String level_name = rs.getString("level_name");
					int smm = rs.getInt("smm");						
					customers.add(new CustomerDTO(ctel,cname,cpoint,ccost,level_name,smm));
				}
				if(!customers.isEmpty()) {
					jtxtPool.setText("전화\t이름\t포인트\t구매누적액\t고객레벨\t레벨업을 위한 앞으로 구매할 금액\n");
					jtxtPool.append("-------------------------------------------------------------------------------------------------------------\n");;
					for(CustomerDTO c : customers) {
						jtxtPool.append(c.toString()+"\n");
						jtxtId.setText("");
						jtxtName.setText("");
						jtxtPoint.setText("");
						jtxtTel.setText("");
						jcomLevel.setSelectedIndex(0);
					}
				}else {
					jtxtId.setText("");
					jtxtName.setText("");
					jtxtPoint.setText("");
					jcomLevel.setSelectedIndex(0);
					jtxtPool.setText("회원이 아무도 없습니다.");
				}
			} catch (SQLException e1) {
				System.out.println(e1.getMessage());
			} finally {
				try {
					if(rs!=null) rs.close();
					if(pstmt!=null) pstmt.close();
					if(conn!=null) conn.close();
				} catch (Exception e2) {
					System.out.println(e2.getMessage()+2);
				}
			}				
		}else if(e.getSource()==jbtnInsert) {
			String sql = "INSERT INTO CUSTOMER (CID, CTEL, CNAME) VALUES (CUS_SQ.NEXTVAL, ?, ?)";
			String ctel = jtxtTel.getText().trim();
			String cname = jtxtName.getText().trim();
			if(ctel.length()!=0 && cname.length()!=0) {
				try {
					conn = DriverManager.getConnection(url,"scott","tiger");
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, ctel);
					pstmt.setString(2, cname);
					int result = pstmt.executeUpdate();
					if(result>0) {
						jtxtId.setText(rs.getString("cid"));
						jtxtName.setText(rs.getString("cname"));
						jtxtPoint.setText("1000");
						jtxtPool.setText("회원가입 감사합니다.포인트 1000점을 선물로 드립니다.");					
					} else {
						jtxtPool.setText("회원가입에 실패했습니다.");
					}
				} catch (Exception e1) {
					System.out.println(e1.getMessage());
				} finally {
					try {
						if(rs!=null) rs.close();
						if(pstmt!=null) pstmt.close();
						if(conn!=null) conn.close();
					} catch (Exception e2) {
						System.out.println(e2.getMessage()+2);
					}
				}		
			}else {
				jtxtName.setText("");
				jtxTel.setText("");
				jtxtPoint.setText("");
				jcomLevel.setSelectedIndex(0);
				jtxtPool.setText("전화번호와 이름을 입력해야 회원가입이 가능해요.");
			}
			
		}else if(e.getSource()==jbtnTelUpdate) {
			String sql = "UPDATE CUSTOMER SET CTEL=? WHERE CID=?";
			String cid = jtxtId.getText().trim();
			String ctel = jtxtTel.getText().trim();
			String cname = jtxtName.getText().trim();
			String cpoint = jtxtPoint.getText();
			String level_name = jcomLevel.getSelectedItem().toString();
			if(cid.length()!=0 && ctel.length()>9) {
				try {
					conn = DriverManager.getConnection(url,"scott","tiger");
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, ctel);
					pstmt.setString(2, cid);
					int result = pstmt.executeUpdate();
					if(result>0) {
						jtxtPool.setText("번호 수정이 완료되었습니다.");
					}else {
						jtxtPool.setText("번호 수정이 실패되었습니다.");
					}		
				} catch (Exception e1) {
					System.out.println(e1.getMessage());
				} finally {
					try {
						if(rs!=null) rs.close();
						if(pstmt!=null) pstmt.close();
						if(conn!=null) conn.close();
					} catch (Exception e2) {
						System.out.println(e2.getMessage()+2);
					}
				}		
			}else {
				jtxtId.setText("");
				jtxtTel.setText("");
				jtxtName.setText("");
				jtxtPoint.setText("");
				jcomLevel.setSelectedItem("");
				jtxtPool.setText("제대로된 전화번호를 입력하세요.");
			}
		}else if(e.getSource()==jbtnDelete) {
			String sql="UPDATE CUSTOMER SET CDELETE=? WHERE CID=?";
			String ctel = jtxtTel.getText().trim();
			if(ctel.length()!=0) {
				try {
					conn = DriverManager.getConnection(url,"scott","tiger");
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1,1);
					pstmt.setString(2,"cid");
					int result = pstmt.executeUpdate();
					if(result>0) {
						jtxtPool.setText(ctel+"님 회원 탈퇴가 완료되었습니다.");						
					}					
				} catch (SQLException e1) {
					System.out.println(e1.getMessage());
				} finally {
					try {
						if(rs!=null) rs.close();
						if(pstmt!=null) pstmt.close();
						if(conn!=null) conn.close();
					} catch (Exception e2) {
						System.out.println(e2.getMessage()+2);
					}
				}						
			}else {
				jtxtId.setText("");
				jtxtTel.setText("");
				jtxtName.setText("");
				jtxtPoint.setText("");
				jcomLevel.setSelectedItem("");
				jtxtPool.setText("고객전화 입력 후 탈퇴처리 가능합니다.");
			}						
		}else if(e.getSource()==jbtnExit) {
			setVisible(false);
			dispose();
			System.exit(0);
		}

	}
	public static void main(String[] args) {
		new CustomerFrame("고객관리");
	}
	}

